/*  =========================================================================
    mql_client - mqless Client

    Codec class for mql_client.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef MQL_CLIENT_H_INCLUDED
#define MQL_CLIENT_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/mql_client.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
//  Create a new mql_client, return the reference if successful,
//  or NULL if construction failed due to lack of available memory.
MQL_EXPORT mql_client_t *
    mql_client_new (void);

//  Destroy the mql_client and free all memory used by the object.
MQL_EXPORT void
    mql_client_destroy (mql_client_t **self_p);

//  Return actor, when caller wants to work with multiple actors and/or
//  input sockets asynchronously.
MQL_EXPORT zactor_t *
    mql_client_actor (mql_client_t *self);

//  Return message pipe for asynchronous message I/O. In the high-volume case,
//  we send methods and get replies to the actor, in a synchronous manner, and
//  we send/recv high volume message data to a second pipe, the msgpipe. In
//  the low-volume case we can do everything over the actor pipe, if traffic
//  is never ambiguous.
MQL_EXPORT zsock_t *
    mql_client_msgpipe (mql_client_t *self);

//  Return true if client is currently connected, else false. Note that the
//  client will automatically re-connect if the server dies and restarts after
//  a successful first connection.
MQL_EXPORT bool
    mql_client_connected (mql_client_t *self);

//  Connect to server endpoint, with specified timeout in msecs (zero means wait
//  forever). Constructor succeeds if connection is successful. The caller may
//  specify its address.
//  Returns >= 0 if successful, -1 if interrupted.
MQL_EXPORT int
    mql_client_connect (mql_client_t *self, const char *endpoint, uint32_t timeout, const char *address);

//  Send a message to the actor
//  Returns >= 0 if successful, -1 if interrupted.
MQL_EXPORT int
    mql_client_send (mql_client_t *self, uint8_t invocation_type, const char *function, const char *routing_key, const char *subject, const char *tracker, const char *payload);

//  Receive message from server; Returns >= 0 if successful, -1 if interrupted.
MQL_EXPORT int
    mql_client_recv (mql_client_t *self);

//  Return last received command. Can be one of these values:
//      "MAILBOX DELIVER"
MQL_EXPORT const char *
    mql_client_command (mql_client_t *self);

//  Return last received status_code
MQL_EXPORT int
    mql_client_status_code (mql_client_t *self);

//  Return last received reason
MQL_EXPORT const char *
    mql_client_reason (mql_client_t *self);

//  Return last received reason and transfer ownership to caller
MQL_EXPORT const char *
    mql_client_get_reason (mql_client_t *self);

//  Return last received source
MQL_EXPORT uint8_t
    mql_client_source (mql_client_t *self);

//  Return last received tracker
MQL_EXPORT const char *
    mql_client_tracker (mql_client_t *self);

//  Return last received payload
MQL_EXPORT const char *
    mql_client_payload (mql_client_t *self);

//  Return last received payload and transfer ownership to caller
MQL_EXPORT const char *
    mql_client_get_payload (mql_client_t *self);

//  Enable verbose tracing (animation) of state machine activity.
MQL_EXPORT void
    mql_client_set_verbose (mql_client_t *self, bool verbose);

//  Self test of this class.
MQL_EXPORT void
    mql_client_test (bool verbose);

//  @end

#ifdef __cplusplus
}
#endif

#endif
